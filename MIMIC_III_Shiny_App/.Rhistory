#new_pair = TRUE
if (new_pair & 'D' == pair[1] & 'Y' == pair[2]){
#print('START')
#print(pair)
# If non-reundant, can check if d-seperatable
pair_is_d_sep = d_sep(bn = dag_no_direct, x = pair[[1]], y = pair[[2]], z = pair[[3]])
#print(pair_is_d_sep)
if (pair_is_d_sep) {
true_d_sep_set <- c(true_d_sep_set, list(pair))
}
}
}
cat('Number of non-redundant statements which satisfy the backdoor criterion', length(true_d_sep_set), 'which can be seen below')
print(true_d_sep_set)
#d_sep(bn = dag_no_direct, x ='D', y = 'Y', z = pair[3] )
combinations_nodes <-function(vars){
pairs <- combn(x = vars, 2, list)
arg_sets <- list()
for(pair in pairs){
others <- setdiff(vars, pair)
conditioning_sets <- unlist(lapply(0:4, function(.x) combn(others, .x, list)), recursive = F)
for(set in conditioning_sets){
args <- list(x = pair[1], y = pair[2], z = set)
arg_sets <- c(arg_sets, list(args))
}
}
print(length(arg_sets))
return(arg_sets)
}
# Source for is.contained function to see if the ellements of a vector is included in another vector
# https://stackoverflow.com/questions/39338394/check-if-list-contains-another-list-in-r/41328072
is.contained=function(vec1,vec2){
x=vector(length = length(vec1))
for (i in 1:length(vec1)) {
x[i] = vec1[i] %in% vec2
if(length(which(vec1[i] %in% vec2)) == 0) vec2 else
vec2=vec2[-match(vec1[i], vec2)]
}
y=all(x==T)
return(y)
}
check_redundancies = function(pair, pair_comparison){
#Determines if a pair with 3 ellments has redundancies in the third ellement with a pair_comparison list
new_pair = TRUE
if (length(pair_comparison) > 0){
for(d_sep_pair in pair_comparison){
if ((d_sep_pair[[1]] == pair[[1]]) & (d_sep_pair[[2]] == pair[[2]])) {
# First checking if there is a blank existing statement, definitely redundant
if (identical(d_sep_pair[[3]], character(0) ) ) {
new_pair = FALSE
} else {
if(is.contained(d_sep_pair[[3]], pair[[3]])){
new_pair = FALSE
}
}
}
}
}
return(new_pair)
}
dag_no_direct = drop.arc(dag,'D','Y')
#graphviz.plot(dag_no_direct)
vars <- nodes(dag_no_direct)
arg_sets <- combinations_nodes(vars)
cat('Total number of d-separations to test', length(arg_sets), '\n')
true_d_sep_set <- list()
for(pair in arg_sets){
new_pair = check_redundancies(pair, true_d_sep_set)
#new_pair = TRUE
if (new_pair & 'D' == pair[1] & 'Y' == pair[2]){
#print('START')
#print(pair)
# If non-reundant, can check if d-seperatable
pair_is_d_sep = d_sep(bn = dag_no_direct, x = pair[[1]], y = pair[[2]], z = pair[[3]])
#print(pair_is_d_sep)
if (pair_is_d_sep) {
true_d_sep_set <- c(true_d_sep_set, list(pair))
}
}
}
cat('Number of non-redundant statements which satisfy the backdoor criterion is', length(true_d_sep_set), ',which can be seen below')
print(true_d_sep_set)
#d_sep(bn = dag_no_direct, x ='D', y = 'Y', z = pair[3] )
combinations_nodes <-function(vars){
pairs <- combn(x = vars, 2, list)
arg_sets <- list()
for(pair in pairs){
others <- setdiff(vars, pair)
conditioning_sets <- unlist(lapply(0:4, function(.x) combn(others, .x, list)), recursive = F)
for(set in conditioning_sets){
args <- list(x = pair[1], y = pair[2], z = set)
arg_sets <- c(arg_sets, list(args))
}
}
print(length(arg_sets))
return(arg_sets)
}
# Source for is.contained function to see if the ellements of a vector is included in another vector
# https://stackoverflow.com/questions/39338394/check-if-list-contains-another-list-in-r/41328072
is.contained=function(vec1,vec2){
x=vector(length = length(vec1))
for (i in 1:length(vec1)) {
x[i] = vec1[i] %in% vec2
if(length(which(vec1[i] %in% vec2)) == 0) vec2 else
vec2=vec2[-match(vec1[i], vec2)]
}
y=all(x==T)
return(y)
}
check_redundancies = function(pair, pair_comparison){
#Determines if a pair with 3 ellments has redundancies in the third ellement with a pair_comparison list
new_pair = TRUE
if (length(pair_comparison) > 0){
for(d_sep_pair in pair_comparison){
if ((d_sep_pair[[1]] == pair[[1]]) & (d_sep_pair[[2]] == pair[[2]])) {
# First checking if there is a blank existing statement, definitely redundant
if (identical(d_sep_pair[[3]], character(0) ) ) {
new_pair = FALSE
} else {
if(is.contained(d_sep_pair[[3]], pair[[3]])){
new_pair = FALSE
}
}
}
}
}
return(new_pair)
}
dag_no_direct = drop.arc(dag,'D','Y')
#graphviz.plot(dag_no_direct)
vars <- nodes(dag_no_direct)
arg_sets <- combinations_nodes(vars)
cat('Total number of d-separations to test', length(arg_sets), '\n')
true_d_sep_set <- list()
for(pair in arg_sets){
new_pair = check_redundancies(pair, true_d_sep_set)
#new_pair = TRUE
if (new_pair & 'D' == pair[1] & 'Y' == pair[2]){
#print('START')
#print(pair)
# If non-reundant, can check if d-seperatable
pair_is_d_sep = d_sep(bn = dag_no_direct, x = pair[[1]], y = pair[[2]], z = pair[[3]])
#print(pair_is_d_sep)
if (pair_is_d_sep) {
true_d_sep_set <- c(true_d_sep_set, list(pair))
}
}
}
cat('Number of non-redundant statements which satisfy the backdoor criterion is', length(true_d_sep_set), 'which can be seen below')
print(true_d_sep_set)
#d_sep(bn = dag_no_direct, x ='D', y = 'Y', z = pair[3] )
combinations_nodes <-function(vars){
pairs <- combn(x = vars, 2, list)
arg_sets <- list()
for(pair in pairs){
others <- setdiff(vars, pair)
conditioning_sets <- unlist(lapply(0:4, function(.x) combn(others, .x, list)), recursive = F)
for(set in conditioning_sets){
args <- list(x = pair[1], y = pair[2], z = set)
arg_sets <- c(arg_sets, list(args))
}
}
print(length(arg_sets))
return(arg_sets)
}
# Source for is.contained function to see if the ellements of a vector is included in another vector
# https://stackoverflow.com/questions/39338394/check-if-list-contains-another-list-in-r/41328072
is.contained=function(vec1,vec2){
x=vector(length = length(vec1))
for (i in 1:length(vec1)) {
x[i] = vec1[i] %in% vec2
if(length(which(vec1[i] %in% vec2)) == 0) vec2 else
vec2=vec2[-match(vec1[i], vec2)]
}
y=all(x==T)
return(y)
}
check_redundancies = function(pair, pair_comparison){
#Determines if a pair with 3 ellments has redundancies in the third ellement with a pair_comparison list
new_pair = TRUE
if (length(pair_comparison) > 0){
for(d_sep_pair in pair_comparison){
if ((d_sep_pair[[1]] == pair[[1]]) & (d_sep_pair[[2]] == pair[[2]])) {
# First checking if there is a blank existing statement, definitely redundant
if (identical(d_sep_pair[[3]], character(0) ) ) {
new_pair = FALSE
} else {
if(is.contained(d_sep_pair[[3]], pair[[3]])){
new_pair = FALSE
}
}
}
}
}
return(new_pair)
}
dag_no_direct = drop.arc(dag,'D','Y')
#graphviz.plot(dag_no_direct)
vars <- nodes(dag_no_direct)
arg_sets <- combinations_nodes(vars)
true_d_sep_set <- list()
for(pair in arg_sets){
new_pair = check_redundancies(pair, true_d_sep_set)
#new_pair = TRUE
if (new_pair & 'D' == pair[1] & 'Y' == pair[2]){
#print('START')
#print(pair)
# If non-reundant, can check if d-seperatable
pair_is_d_sep = d_sep(bn = dag_no_direct, x = pair[[1]], y = pair[[2]], z = pair[[3]])
#print(pair_is_d_sep)
if (pair_is_d_sep) {
true_d_sep_set <- c(true_d_sep_set, list(pair))
}
}
}
cat('Number of non-redundant statements which satisfy the backdoor criterion is', length(true_d_sep_set), 'which can be seen below')
print(true_d_sep_set)
#d_sep(bn = dag_no_direct, x ='D', y = 'Y', z = pair[3] )
combinations_nodes <-function(vars){
pairs <- combn(x = vars, 2, list)
arg_sets <- list()
for(pair in pairs){
others <- setdiff(vars, pair)
conditioning_sets <- unlist(lapply(0:4, function(.x) combn(others, .x, list)), recursive = F)
for(set in conditioning_sets){
args <- list(x = pair[1], y = pair[2], z = set)
arg_sets <- c(arg_sets, list(args))
}
}
print(length(arg_sets))
return(arg_sets)
}
# Source for is.contained function to see if the ellements of a vector is included in another vector
# https://stackoverflow.com/questions/39338394/check-if-list-contains-another-list-in-r/41328072
is.contained=function(vec1,vec2){
x=vector(length = length(vec1))
for (i in 1:length(vec1)) {
x[i] = vec1[i] %in% vec2
if(length(which(vec1[i] %in% vec2)) == 0) vec2 else
vec2=vec2[-match(vec1[i], vec2)]
}
y=all(x==T)
return(y)
}
check_redundancies = function(pair, pair_comparison){
#Determines if a pair with 3 ellments has redundancies in the third ellement with a pair_comparison list
new_pair = TRUE
if (length(pair_comparison) > 0){
for(d_sep_pair in pair_comparison){
if ((d_sep_pair[[1]] == pair[[1]]) & (d_sep_pair[[2]] == pair[[2]])) {
# First checking if there is a blank existing statement, definitely redundant
if (identical(d_sep_pair[[3]], character(0) ) ) {
new_pair = FALSE
} else {
if(is.contained(d_sep_pair[[3]], pair[[3]])){
new_pair = FALSE
}
}
}
}
}
return(new_pair)
}
dag_no_direct = drop.arc(dag,'D','Y')
#graphviz.plot(dag_no_direct)
vars <- nodes(dag_no_direct)
arg_sets <- combinations_nodes(vars)
true_d_sep_set <- list()
true_d_sep_set_show <-list()
for(pair in arg_sets){
new_pair = check_redundancies(pair, true_d_sep_set)
#new_pair = TRUE
if (new_pair & 'D' == pair[1] & 'Y' == pair[2]){
#print('START')
#print(pair)
# If non-reundant, can check if d-seperatable
pair_is_d_sep = d_sep(bn = dag_no_direct, x = pair[[1]], y = pair[[2]], z = pair[[3]])
#print(pair_is_d_sep)
if (pair_is_d_sep) {
true_d_sep_set <- c(true_d_sep_set, list(pair))
true_d_sep_set_show <- c(true_d_sep_set_show, list(pair[[3]]))
}
}
}
cat('Number of non-redundant statements which satisfy the backdoor criterion is', length(true_d_sep_set), 'which can be seen below')
print(true_d_sep_set)
#d_sep(bn = dag_no_direct, x ='D', y = 'Y', z = pair[3] )
combinations_nodes <-function(vars){
pairs <- combn(x = vars, 2, list)
arg_sets <- list()
for(pair in pairs){
others <- setdiff(vars, pair)
conditioning_sets <- unlist(lapply(0:4, function(.x) combn(others, .x, list)), recursive = F)
for(set in conditioning_sets){
args <- list(x = pair[1], y = pair[2], z = set)
arg_sets <- c(arg_sets, list(args))
}
}
print(length(arg_sets))
return(arg_sets)
}
# Source for is.contained function to see if the ellements of a vector is included in another vector
# https://stackoverflow.com/questions/39338394/check-if-list-contains-another-list-in-r/41328072
is.contained=function(vec1,vec2){
x=vector(length = length(vec1))
for (i in 1:length(vec1)) {
x[i] = vec1[i] %in% vec2
if(length(which(vec1[i] %in% vec2)) == 0) vec2 else
vec2=vec2[-match(vec1[i], vec2)]
}
y=all(x==T)
return(y)
}
check_redundancies = function(pair, pair_comparison){
#Determines if a pair with 3 ellments has redundancies in the third ellement with a pair_comparison list
new_pair = TRUE
if (length(pair_comparison) > 0){
for(d_sep_pair in pair_comparison){
if ((d_sep_pair[[1]] == pair[[1]]) & (d_sep_pair[[2]] == pair[[2]])) {
# First checking if there is a blank existing statement, definitely redundant
if (identical(d_sep_pair[[3]], character(0) ) ) {
new_pair = FALSE
} else {
if(is.contained(d_sep_pair[[3]], pair[[3]])){
new_pair = FALSE
}
}
}
}
}
return(new_pair)
}
dag_no_direct = drop.arc(dag,'D','Y')
#graphviz.plot(dag_no_direct)
vars <- nodes(dag_no_direct)
arg_sets <- combinations_nodes(vars)
true_d_sep_set <- list()
true_d_sep_set_show <-list()
for(pair in arg_sets){
new_pair = check_redundancies(pair, true_d_sep_set)
#new_pair = TRUE
if (new_pair & 'D' == pair[1] & 'Y' == pair[2]){
#print('START')
#print(pair)
# If non-reundant, can check if d-seperatable
pair_is_d_sep = d_sep(bn = dag_no_direct, x = pair[[1]], y = pair[[2]], z = pair[[3]])
#print(pair_is_d_sep)
if (pair_is_d_sep) {
true_d_sep_set <- c(true_d_sep_set, list(pair))
true_d_sep_set_show <- c(true_d_sep_set_show, list(pair[[3]]))
}
}
}
cat('Number of non-redundant statements which satisfy the backdoor criterion is', length(true_d_sep_set), 'which can be seen below')
print(true_d_sep_set_show)
#d_sep(bn = dag_no_direct, x ='D', y = 'Y', z = pair[3] )
combinations_nodes <-function(vars){
pairs <- combn(x = vars, 2, list)
arg_sets <- list()
for(pair in pairs){
others <- setdiff(vars, pair)
conditioning_sets <- unlist(lapply(0:4, function(.x) combn(others, .x, list)), recursive = F)
for(set in conditioning_sets){
args <- list(x = pair[1], y = pair[2], z = set)
arg_sets <- c(arg_sets, list(args))
}
}
print(length(arg_sets))
return(arg_sets)
}
# Source for is.contained function to see if the ellements of a vector is included in another vector
# https://stackoverflow.com/questions/39338394/check-if-list-contains-another-list-in-r/41328072
is.contained=function(vec1,vec2){
x=vector(length = length(vec1))
for (i in 1:length(vec1)) {
x[i] = vec1[i] %in% vec2
if(length(which(vec1[i] %in% vec2)) == 0) vec2 else
vec2=vec2[-match(vec1[i], vec2)]
}
y=all(x==T)
return(y)
}
check_redundancies = function(pair, pair_comparison){
#Determines if a pair with 3 ellments has redundancies in the third ellement with a pair_comparison list
new_pair = TRUE
if (length(pair_comparison) > 0){
for(d_sep_pair in pair_comparison){
if ((d_sep_pair[[1]] == pair[[1]]) & (d_sep_pair[[2]] == pair[[2]])) {
# First checking if there is a blank existing statement, definitely redundant
if (identical(d_sep_pair[[3]], character(0) ) ) {
new_pair = FALSE
} else {
if(is.contained(d_sep_pair[[3]], pair[[3]])){
new_pair = FALSE
}
}
}
}
}
return(new_pair)
}
dag_no_direct = drop.arc(dag,'D','Y')
#graphviz.plot(dag_no_direct)
vars <- nodes(dag_no_direct)
arg_sets <- combinations_nodes(vars)
true_d_sep_set <- list()
true_d_sep_set_show <-list()
for(pair in arg_sets){
new_pair = check_redundancies(pair, true_d_sep_set)
#new_pair = TRUE
if (new_pair & 'D' == pair[1] & 'Y' == pair[2]){
#print('START')
#print(pair)
# If non-reundant, can check if d-seperatable
pair_is_d_sep = d_sep(bn = dag_no_direct, x = pair[[1]], y = pair[[2]], z = pair[[3]])
#print(pair_is_d_sep)
if (pair_is_d_sep) {
true_d_sep_set <- c(true_d_sep_set, list(pair))
true_d_sep_set_show <- c(true_d_sep_set_show, list(pair[[3]]))
}
}
}
cat('Number of non-redundant statements which satisfy the backdoor criterion is', length(true_d_sep_set_show), 'which can be seen below')
print(true_d_sep_set_show)
#d_sep(bn = dag_no_direct, x ='D', y = 'Y', z = pair[3] )
combinations_nodes <-function(vars){
pairs <- combn(x = vars, 2, list)
arg_sets <- list()
for(pair in pairs){
others <- setdiff(vars, pair)
conditioning_sets <- unlist(lapply(0:4, function(.x) combn(others, .x, list)), recursive = F)
for(set in conditioning_sets){
args <- list(x = pair[1], y = pair[2], z = set)
arg_sets <- c(arg_sets, list(args))
}
}
print(length(arg_sets))
return(arg_sets)
}
# Source for is.contained function to see if the ellements of a vector is included in another vector
# https://stackoverflow.com/questions/39338394/check-if-list-contains-another-list-in-r/41328072
is.contained=function(vec1,vec2){
x=vector(length = length(vec1))
for (i in 1:length(vec1)) {
x[i] = vec1[i] %in% vec2
if(length(which(vec1[i] %in% vec2)) == 0) vec2 else
vec2=vec2[-match(vec1[i], vec2)]
}
y=all(x==T)
return(y)
}
check_redundancies = function(pair, pair_comparison){
#Determines if a pair with 3 ellments has redundancies in the third ellement with a pair_comparison list
new_pair = TRUE
if (length(pair_comparison) > 0){
for(d_sep_pair in pair_comparison){
if ((d_sep_pair[[1]] == pair[[1]]) & (d_sep_pair[[2]] == pair[[2]])) {
# First checking if there is a blank existing statement, definitely redundant
if (identical(d_sep_pair[[3]], character(0) ) ) {
new_pair = FALSE
} else {
if(is.contained(d_sep_pair[[3]], pair[[3]])){
new_pair = FALSE
}
}
}
}
}
return(new_pair)
}
dag_no_direct = drop.arc(dag,'D','Y')
#graphviz.plot(dag_no_direct)
vars <- nodes(dag_no_direct)
arg_sets <- combinations_nodes(vars)
true_d_sep_set <- list()
true_d_sep_set_show <-list()
for(pair in arg_sets){
new_pair = check_redundancies(pair, true_d_sep_set)
#new_pair = TRUE
if (new_pair & 'D' == pair[1] & 'Y' == pair[2]){
#print('START')
#print(pair)
# If non-reundant, can check if d-seperatable
pair_is_d_sep = d_sep(bn = dag_no_direct, x = pair[[1]], y = pair[[2]], z = pair[[3]])
#print(pair_is_d_sep)
if (pair_is_d_sep) {
true_d_sep_set <- c(true_d_sep_set, list(pair))
true_d_sep_set_show <- c(true_d_sep_set_show, list(pair[[3]]))
}
}
}
cat('Number of mininum viable nodes which satisfy the backdoor criterion is', length(true_d_sep_set_show), 'which can be seen below')
print(true_d_sep_set_show)
install.packages(c("shiny", "shinydashboard"))
library(shiny); runApp('OneDrive/Documents/Career/Northeastern/Applications_in_DS/MIMIC_III_Shiny_App/MIMIC_III_Dashboard_App.R')
x %>%
str_replace_all("_", " ") %>%
toTitleCase() %>%
str_replace("Imdb", "IMDB") %>%
str_replace("Mpaa", "MPAA")
runApp('OneDrive/Documents/Career/Northeastern/Applications_in_DS/MIMIC_III_Shiny_App/MIMIC_III_Dashboard_App.R')
install.packages("feather")
mimic_data <- read_feather('data/mimic_data_train.feather', columns = NULL)
mimic_data
library(feather)
mimic_data <- read_feather('data/mimic_data_train.feather', columns = NULL)
mimic_data <- read_feather('data/mimic_data_train.feather', columns = NULL)
load("data/movies.Rdata")
library(shiny); runApp('OneDrive/Documents/Career/Northeastern/Applications_in_DS/MIMIC_III_Shiny_App/MIMIC_III_Dashboard_App.R')
runApp('OneDrive/Documents/Career/Northeastern/Applications_in_DS/MIMIC_III_Shiny_App/MIMIC_III_Dashboard_App.R')
install.packages("DT")
runApp('OneDrive/Documents/Career/Northeastern/Applications_in_DS/MIMIC_III_Shiny_App/MIMIC_III_Dashboard_App.R')
